#!/usr/bin/env python3

"""
Reads a blender_manifest.toml file and generates a python file
with the bl_info dictionary for Blender add-ons.
"""

import sys
import toml
import ast

def toml_to_bl_info_dict(toml_data):
    bl_info = {}
    bl_info["name"] = toml_data.get("name", "Unknown Add-on")
    bl_info["description"] = toml_data.get("tagline", "No description provided")
    bl_info["author"] = toml_data.get("maintainer", "Unknown Author")
    bl_info["blender"] = tuple(map(int, toml_data.get("blender_version_min", "4.2.0").split(".")))
    bl_info["version"] = tuple(map(int, toml_data.get("version", "0.0.0").split(".")))
    bl_info["wiki_url"] = toml_data.get("website", "")
    return bl_info

def main():
    import argparse

    parser = argparse.ArgumentParser(description="Generate bl_info.py from blender_manifest.toml")
    parser.add_argument("input", nargs="?", default="blender_manifest.toml", help="Input TOML file")
    parser.add_argument("output", nargs="?", default="info.py", help="Output Python file")
    args = parser.parse_args()

    # Read TOML file
    try:
        with open(args.input, "r", encoding="utf-8") as f:
            toml_data = toml.load(f)
    except Exception as e:
        print(f"Error reading TOML: {e}", file=sys.stderr)
        sys.exit(1)

    # Compose bl_info dictionary
    bl_info_dict = toml_to_bl_info_dict(toml_data)

    # Write bl_info.py
    try:
        with open(args.output, "w", encoding="utf-8") as f:
            f.write("# This file is automatically generated from blender_manifest.toml\n")
            f.write("#\n")
            f.write(f"# Generated with: $ {sys.argv[0]} {args.input} {args.output}\n")
            f.write("#\n\n")

            f.write("jiggle_info = {\n")
            for key, value in bl_info_dict.items():
                f.write(f"    {repr(key)}: {repr(value)},\n")
            f.write("}\n")
        print(f"jiggle_info written successfully.")
    except Exception as e:
        print(f"Error writing output: {e}", file=sys.stderr)
        sys.exit(2)

if __name__ == "__main__":
    main()
